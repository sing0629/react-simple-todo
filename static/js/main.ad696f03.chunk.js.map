{"version":3,"sources":["components/ControlPanel.tsx","components/TodoListItem.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ControlPanel","value","filter","onChange","onAddTodo","onReset","onToggleFilterTodo","onToggleFilterCompleted","Box","display","alignItems","TextField","fullWidth","placeholder","marginLeft","Button","disableRipple","disabled","trim","type","color","variant","onClick","marginY","justifyContent","ButtonGroup","completed","TodoListItem","id","text","onToggle","onRemove","ListItem","dense","button","ListItemIcon","Checkbox","edge","defaultChecked","checked","target","ListItemText","primary","Typography","style","textDecoration","ListItemSecondaryAction","IconButton","aria-label","DeleteForever","intialTodos","App","useState","todos","setTodos","setValue","setFilter","filteredTodos","todo","toggleTodoById","oldTodos","map","todoItem","removeTodoById","maxWidth","margin","padding","align","flexDirection","event","preventDefault","length","List","subheader","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad696f03.chunk.js","sourcesContent":["// ControlPanel.tsx\n\nimport { Box, Button, ButtonGroup, TextField } from \"@material-ui/core\";\nimport React, { FC } from \"react\";\nimport { TodoFilter } from \"../App\";\n\ntype ControlPanelProps = {\n  value: string;\n  filter: TodoFilter;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onAddTodo: React.MouseEventHandler<HTMLButtonElement>;\n  onReset: () => void;\n  onToggleFilterTodo: () => void;\n  onToggleFilterCompleted: () => void;\n};\n\nconst ControlPanel: FC<ControlPanelProps> = ({\n  value,\n  filter,\n  onChange,\n  onAddTodo,\n  onReset,\n  onToggleFilterTodo,\n  onToggleFilterCompleted,\n}) => {\n  return (\n    <>\n      <form>\n        <Box display=\"flex\" alignItems=\"center\">\n          <TextField fullWidth placeholder=\"Try yourslef!\" value={value} onChange={onChange} />\n          <Box marginLeft={2}>\n            <Button\n              disableRipple\n              disabled={!value.trim()}\n              type=\"submit\"\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={onAddTodo}\n            >\n              Add\n            </Button>\n          </Box>\n        </Box>\n      </form>\n      <Box marginY={2} display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n        <ButtonGroup>\n          <Button disableRipple color=\"secondary\" onClick={onReset}>\n            rese todos\n          </Button>\n          <Button\n            disableRipple\n            variant={filter.completed === false ? \"contained\" : \"outlined\"}\n            color=\"secondary\"\n            onClick={onToggleFilterTodo}\n          >\n            todo\n          </Button>\n          <Button\n            disableRipple\n            variant={filter.completed === true ? \"contained\" : \"outlined\"}\n            color=\"secondary\"\n            onClick={onToggleFilterCompleted}\n          >\n            completed\n          </Button>\n        </ButtonGroup>\n      </Box>\n    </>\n  );\n};\n\nexport default ControlPanel;\n","// TodoListItem.tsx;\n\nimport {\n  Checkbox,\n  IconButton,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport { DeleteForever } from \"@material-ui/icons\";\nimport { FC } from \"react\";\n\ntype TodoListItemProps = {\n  id: number;\n  text: string;\n  completed: boolean;\n  onRemove: (id: number) => void;\n  onToggle: (id: number, value: boolean) => void;\n};\n\nconst TodoListItem: FC<TodoListItemProps> = ({ id, text, completed, onToggle, onRemove }) => {\n  return (\n    <ListItem dense button onClick={() => onToggle(id, !completed)} disableRipple>\n      <ListItemIcon>\n        <Checkbox\n          edge=\"start\"\n          defaultChecked={completed}\n          checked={completed}\n          onChange={({ target: { checked } }) => onToggle(id, checked)}\n          disableRipple\n        />\n      </ListItemIcon>\n      <ListItemText\n        primary={\n          <Typography\n            style={{ textDecoration: completed ? \"line-through\" : \"initial\" }}\n            color={completed ? \"textSecondary\" : \"initial\"}\n          >\n            {text}\n          </Typography>\n        }\n      />\n      <ListItemSecondaryAction>\n        <IconButton edge=\"end\" aria-label=\"comments\" onClick={() => onRemove(id)}>\n          <DeleteForever />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nexport default TodoListItem;\n","// App.tsx\n\nimport { Box, List, Typography } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport ControlPanel from \"./components/ControlPanel\";\nimport TodoListItem from \"./components/TodoListItem\";\n\nexport type Todo = {\n  id: number;\n  text: string;\n  completed: boolean;\n};\nexport type TodoFilter = { completed: null | boolean };\n\nconst intialTodos: Todo[] = [\n  { id: 0, text: \"Click me to complete\", completed: false },\n  { id: 1, text: \"<- you can also check this box\", completed: true },\n  { id: 2, text: \"press the bin to delete ->\", completed: false },\n  { id: 3, text: \"you can filter me by TODO\", completed: false },\n  { id: 4, text: \"you can filter me by COMPLETED\", completed: true },\n  { id: 5, text: \"more advance tutorials are coming...üòç‚öõÔ∏è\", completed: false },\n];\n\nfunction App() {\n  const [todos, setTodos] = useState<Todo[]>(intialTodos);\n  const [value, setValue] = useState(\"\");\n  const [filter, setFilter] = useState<TodoFilter>({ completed: null });\n\n  const filteredTodos =\n    filter.completed === null ? todos : todos.filter((todo) => todo.completed === filter.completed);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n  };\n\n  const toggleTodoById = (id: number, value: boolean) => {\n    setTodos((oldTodos) => {\n      return oldTodos.map((todoItem) => {\n        if (todoItem.id === id) {\n          // if match, change the completed value\n          return { ...todoItem, completed: value };\n        }\n        // remain unchanged\n        return todoItem;\n      });\n    });\n  };\n\n  const removeTodoById = (id: number) => {\n    setTodos((oldTodos) => {\n      // filter out todo item where it's id match\n      // only return todo item id doesn't match\n      return oldTodos.filter((todoItem) => todoItem.id !== id);\n    });\n  };\n\n  const toggleFilterTodo = () => {\n    if (filter.completed !== false) {\n      setFilter({ completed: false });\n    } else {\n      // reset to null\n      setFilter({ completed: null });\n    }\n  };\n  const toggleFilterCompleted = () => {\n    if (filter.completed !== true) {\n      setFilter({ completed: true });\n    } else {\n      // reset to null\n      setFilter({ completed: null });\n    }\n  };\n\n  const handleAddTodo: React.MouseEventHandler<HTMLButtonElement> = (event) => {\n    event.preventDefault();\n    setTodos((oldTodos) => {\n      return [\n        ...oldTodos,\n        {\n          id: oldTodos.length,\n          text: value.trim(),\n          completed: false,\n        },\n      ];\n    });\n    // reset input after create\n    setValue(\"\");\n  };\n\n  const handleReset = () => {\n    setTodos(intialTodos);\n    setValue(\"\");\n  };\n\n  return (\n    <Box maxWidth={400} margin=\"auto\">\n      <Box padding={4}>\n        <Typography variant=\"h6\" align=\"center\">\n          My first React Simple Todo\n        </Typography>\n      </Box>\n\n      <Box display=\"flex\" flexDirection=\"column\">\n        <ControlPanel\n          value={value}\n          filter={filter}\n          onChange={handleChange}\n          onAddTodo={handleAddTodo}\n          onReset={handleReset}\n          onToggleFilterTodo={toggleFilterTodo}\n          onToggleFilterCompleted={toggleFilterCompleted}\n        />\n        <List\n          subheader={<Typography variant=\"body2\">{`${filteredTodos.length} todos`}</Typography>}\n        >\n          {filteredTodos.map((todo, i) => (\n            <TodoListItem\n              key={`todo-item-${i}`}\n              id={todo.id}\n              text={todo.text}\n              completed={todo.completed}\n              onRemove={removeTodoById}\n              onToggle={toggleTodoById}\n            />\n          ))}\n        </List>\n      </Box>\n    </Box>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// index.tsx\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}